#!/usr/bin/python

import numpy as np

### touchstone class

class Touchstone:

    def __init__(self, fid=None, f=[], s=[], n=[], a=[]):
        if fid: 
            self.load_file(fid)
        else:
            self.f = f
            self.n = n
            if a: 
               self.a = a
            else:
               self.s = s

    def load_file(self, fid):
        v = []
        n = []
        for line in fid.readlines(): 
            line = line.split('!', 1)[0].strip().lower()
            if len(line) and line[0] == '#':
                toks = line[1:].strip().split()
                toks.extend(['ghz', 's', 'ma', 'r', '50'][len(toks):])
                frequency_unit = {'hz':1.0, 'khz':1e3, 'mhz':1e6, 'ghz':1e9}.get(toks[0])
                parameter_type = toks[1]
                parameter_format = toks[2]
            elif len(line):
                v.extend([ np.double(x) for x in line.split() ])

        v = np.array(v)
        pos = np.where(np.sign(np.diff(v[::9])) <= 0)
        if len(pos[0]) != 0:
            pos = pos[0][0] + 1
            n = v[pos * 9:]
            v = v[:pos * 9]
        v = v.reshape((-1, 9))

        self.f = v[:,0] * frequency_unit
        self.n = np.array(n).reshape((-1, 5))

        for N in self.n:
            N[0] *= frequency_unit
        if parameter_format == 'ri':
            v = v[:,1::2] + 1j* v[:,2::2]
        elif parameter_format == 'ma':
            v = v[:,1::2] * np.exp(1j * np.deg2rad(v[:,2::2]))
        elif parameter_format == 'db':
            v = 10**(v[:,1::2] / 20.0) * np.exp(1j * np.deg2rad(v[:,2::2]))

        if parameter_type == 'a':
            self.a = v.reshape((-1, 2, 2))
        elif parameter_type == 's':
            self.s = np.transpose(v.reshape((-1, 2, 2)), axes=(0, 2, 1))
        else:
            raise ValueError

    def copy(self):
        return Touchstone(f=self.f, s=self.s, n=self.n)

    def nparam(self, f):
        for N in self.n:
            if N[0] == f:
                fmin = 10 ** (N[1] / 10)
                gopt = N[2] * np.exp(1j * np.deg2rad(N[3]))
                rn = N[4]
                return fmin, gopt, rn
        return np.nan, np.nan, np.nan

    @property
    def inv(self):
        out = self.copy()
        out.s = np.linalg.inv(self.s)
        return out

    @property
    def a(self):
        return np.array([ s2abcd(S) for S in self._s ])

    @a.setter
    def a(self, a):
        self._s = np.array([ abcd2s(A) for A in a ])

    @property
    def s(self):
        return self._s

    @s.setter
    def s(self, s):
        self._s = np.array(s, dtype=np.complex)

    @property
    def n(self):
        return self._n

    @n.setter
    def n(self, n):
        self._n = np.array(n, dtype=np.double)

    @property
    def f(self):
        return self._f

    @f.setter
    def f(self, f):
        self._f = np.array(f, dtype=np.double)

    def __len__(self):
        return len(self.s)

    def __pow__(self, other):
        out = self.copy()
        out.s = [ cascade(A, B) for A, B in zip(self.s, other.s) ]
        return out

def cascade(A, B):
    k, l = 1, 2
    C = np.zeros((4, 4), dtype='complex')
    C[:2, :2] = A.copy()
    C[2:, 2:] = B.copy()
    D = np.zeros(C.shape, dtype='complex')
    for i in range(4):
        for j in range(4):
            D[i, j] = \
                C[i, j] + \
                (C[k, j] * C[i, l] * (1 - C[l, k]) + \
                 C[l, j] * C[i, k] * (1 - C[k, l]) + \
                 C[k, j] * C[l, l] * C[i, k] + \
                 C[l, j] * C[k, k] * C[i, l]) / \
                ((1 - C[k, l]) * (1 - C[l, k]) - C[k, k] * C[l, l])
    D = np.delete(D, (k, l), 0)
    D = np.delete(D, (k, l), 1)
    return D

### general

def z2g(Z, Z0=50):
    return (Z - Z0) / (Z + Z0)

def g2z(G, Z0=50):
    return np.inf if G == 1 else Z0 * (1 + G) / (1 - G)

def swr(G):
    return (1 + np.abs(G)) / (1 - np.abs(G))

def gmatch(ZS, ZL):
    return (ZL - np.conj(ZS)) / (ZL + ZS)

def mismatch(G):
    return 1 - np.abs(G)**2

def nfig(fmin, gopt, rn, GS):
    """
    rn = normalized noise resistance
    """
    return fmin + 4 * rn * np.abs(GS - gopt)**2 / (np.abs(1 + gopt)**2 * (1 - np.abs(GS)**2))

def nmeasure(f, ga):
    return (f - 1) / (1 - 1 / ga)
    
### matching

def balance(d, short=True):
   d = np.deg2rad(d)
   d = np.arctan(2 * np.tan(d)) if short else np.arctan(np.tan(d) / 2)
   d = np.mod(d, np.pi)
   return np.rad2deg(d)

def lmin(za, zo=50, minimum=True):
   """
   lm = location in degrees
   zm = real-valued wave impedance at lm
   """
   G = z2g(za, zo)
   s = swr(G)
   th = np.angle(G)
   if minimum:
       lm = (th + np.pi) / 4 / np.pi
       zm = zo / s
   else:
       th = th + 2 * np.pi if th < 0 else th
       lm = th / 4 / np.pi
       zm = s * zo
   return lm * 360, zm

def sec1(za, zo=50):
    r, x = za.real, za.imag
    z1 = np.sqrt(r * zo - x**2 * zo / (zo - r))
    d = np.arctan(z1 * (zo - r) / (x * zo))
    d = np.mod(d, np.pi)
    return z1, np.rad2deg(d)

def qwt1(za, zo=50, minimum=True):
    """
    ---------------==========---------|
    main line Z0       Z1       Z0    ZL
    ---------------==========---------|
                     L1=1/4     Lm
    """
    lm, zm = lmin(za, zo=zo, minimum=minimum)
    z1 = np.sqrt(zo * zm)
    return z1, zo, lm

def qwt2(za, zo=50, short=True):
    """
    ---------------==========----|--|
    main line zo       z1        |  za
    ---------------==========-|--|--|
                     L1=1/4   |  |
                              |z2| L2=1/8 shorted or
                              |__|    3/8 opened
    """
    ya = 1 / za
    gl, bl = ya.real, ya.imag
    z1 = np.sqrt(zo / gl) * np.array([1, 1])
    z2 = 1 / bl * np.array([1, -1]) * (1 if short else -1)
    d = np.array([ 45, 135 ])
    res = np.array([ z1, z2, d, 2 * z2 ]).T
    return res[1] if z2[0] < 0 else res[0]

def qwt3(za, z2, zo=50, short=True):
    """
    ---------------==========----|--|
    main line zo       z1        |  za
    ---------------==========-|--|--|
                     L1=1/4   |  |
                              |z2| d=[shorted,opened]
                              |__|
    """
    ya = 1 / za
    gl, bl = ya.real, ya.imag
    z1 = np.sqrt(zo / gl) 
    d = np.arctan([ 1 / (bl * z2), -bl * z2 ])
    d = np.mod(d, np.pi)
    d = np.rad2deg(d)
    i = 0 if short else 1
    return np.array([ z1, z2, d[i], balance(d[i], short=short) ])

def stub1(za, zo=50, short=True):
    """
    -----------------/-----------|
    main line zo    /            za
    ---------------/---/----l----|
                  /   d
                 /___/
    """
    GL = z2g(za, zo)
    thL = np.angle(GL)
    bl = thL / 2 + np.array([1, -1]) * np.arccos(-abs(GL)) / 2
    if short:
        bd = np.arctan(-np.tan(2 * bl - thL) / 2)
    else:
        bd = np.arctan(1 / (np.tan(2 * bl - thL) / 2))
    d = np.mod([ balance(bd, short=short), bd, bl ], np.pi)
    d = np.rad2deg(d)
    return d.T

def stub2(za, l=45, zo=50, mode='ss'):
    """
    -----------------/-----------/---|
    main line Z0    /           /    ZL
    ---------------/---/---l---/---/-|
                  /   d1      /   d2
                 /___/       /___/
    """
    cot = lambda x: 1 / np.tan(x)
    acot = lambda x: np.arctan(1 / x)
    zL = za / zo
    l = np.deg2rad(l)
    m = np.array(list(mode)) == 'o'
    yL = 1 / zL 
    gL, bL = yL.real, yL.imag
    c = 1 / cot(l)
    gmax = 1 + c**2
    b = c + np.array([1, -1]) * np.sqrt(gL * (gmax - gL))
    d1 = acot((c - b - gL * c) / gL) + m[0] * np.pi / 2
    d2 = acot(bL - b) + m[1] * np.pi / 2
    d12 = np.mod([ balance(d1, short=not m[0]), d1, [l]*2, d2, balance(d2, short=not m[1]) ], np.pi)
    d12 = np.rad2deg(d12)
    return d12.T

def lmatch(ZS, ZL, reverse=False):
    """
    ZS <---+---X2--< ZL
           X1   
    """
    if reverse: ZS, ZL = ZL, ZS
    RS, XS = ZS.real, ZS.imag
    RL, XL = ZL.real, ZL.imag
    QS = RS / RL - 1 + XS**2 / (RS * RL)
    Q = np.sqrt(QS)
    X1 = (XS + np.array([1, -1]) * Q * RS) / (RS / RL - 1)
    X2 = -(XL + np.array([1, -1]) * Q * RL)
    return np.array([X1, X2]).T

### scattering parameters

def npassive(S, GT, GS):
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    return 1 / GT if np.abs(S21 - S12) < 1e-9 and np.abs(S21 * S12) < 1 else np.nan
 
def sgain(S, g1, g2):
    if g2 == 'a':
        return sgain(S, g1, np.conj(gout(S, g1)))
    if g2 == 'p':
        return sgain(S, np.conj(gin(S,g1)), g1)
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    return (1 - np.abs(g1)**2) * (1 - np.abs(g2)**2) * np.abs(S21)**2 / (
           np.abs((1 - S11 * g1) * (1 - S22 * g2) - S12 * S21 * g1 * g2)**2)

def smatch(S):
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    D = det(S)
    B1 = 1 + np.abs(S11)**2 - np.abs(S22)**2 - np.abs(D)**2
    B2 = 1 + np.abs(S22)**2 - np.abs(S11)**2 - np.abs(D)**2
    C1 = S11 - D * np.conj(S22)
    C2 = S22 - D * np.conj(S11)
    GS = (B1 - np.sign(B1) * np.sqrt(B1**2 - 4 * np.abs(C1)**2)) / (2 * C1)
    GL = (B2 - np.sign(B2) * np.sqrt(B2**2 - 4 * np.abs(C2)**2)) / (2 * C2)
    return GS, GL

def gin(S, GL):
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    if np.isnan(GL): return np.nan
    return S11 + np.nan_to_num(S12 * S21 * GL / (1 - S22 * GL))

def gout(S, GS):
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    if np.isnan(GS): return np.nan
    return S22 + np.nan_to_num(S12 * S21 * GS / (1 - S11 * GS))

def gum(S):
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    return np.abs(S21)**2 / ((1 - np.abs(S11)**2) * (1 - np.abs(S22)**2))

def gui(S):
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    return 1 / (1 - np.abs(S11)**2)

def guo(S):
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    return 1 / (1 - np.abs(S22)**2)

def gmsg(S):
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    return np.abs(S21) / np.abs(S12)

def gmag(S):
    K = rollet(S)
    if np.isinf(K): return gum(S) 
    if K < 1: return np.nan
    return gmsg(S) * (K - np.sqrt(K**2 - 1))

def gu(S):
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    K = rollet(S)
    if K < 1: return np.nan
    return 1 / np.abs(1 - ((S12 * S21 * np.conj(S11 * S22)) * gui(S) * guo(S)))**2

def det(S):
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    return S11 * S22 - S12 * S21

def rollet(S):
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    return (1 - np.abs(S11)**2 - np.abs(S22)**2 + np.abs(det(S))**2) / np.abs(2 * S12 * S21)

def mu(S):
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    D = det(S)
    return (1 - np.abs(S11)**2) / (np.abs(S22 - D * np.conj(S11)) + np.abs(S12 * S21))

def tothreeport(S):
    S = np.array(S)
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    D11 = 1 - S11 - S12
    D12 = 1 - S11 - S21
    D21 = 1 - S12 - S22
    D22 = 1 - S21 - S22
    E = S11 + S22 + S12 + S21
    return np.array([
        [ S11+D11*D12/(4-E), S12+D11*D21/(4-E), 2*D11/(4-E) ],
        [ S21+D22*D12/(4-E), S22+D22*D21/(4-E), 2*D22/(4-E) ],
        [       2*D12/(4-E),       2*D21/(4-E),     E/(4-E) ]
    ])

def lift_ground(S, G):
    S = tothreeport(S)
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    S31 = S[2,0]
    S32 = S[2,1]
    S13 = S[0,2]
    S23 = S[1,2]
    S33 = S[2,2]
    return np.array([
       [ S11+S13*S31/(1/G-S33), S12+S13*S32/(1/G-S33) ],
       [ S21+S23*S31/(1/G-S33), S22+S23*S32/(1/G-S33) ]
    ])

def cbg_transform(S):    
    S = tothreeport(S)
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    S31 = S[2,0]
    S32 = S[2,1]
    S13 = S[0,2]
    S23 = S[1,2]
    S33 = S[2,2]
    return np.array([
       [ S33-S31*S13/(1+S11), S32-S31*S12/(1+S11) ],
       [ S23-S21*S13/(1+S11), S22-S21*S12/(1+S11) ]
    ])

def ccd_transform(S):
    S = tothreeport(S)
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    S31 = S[2,0]
    S32 = S[2,1]
    S13 = S[0,2]
    S23 = S[1,2]
    S33 = S[2,2]
    return np.array([
       [ S11-S12*S21/(1+S22), S13-S12*S23/(1+S22) ],
       [ S31-S32*S21/(1+S22), S33-S32*S23/(1+S22) ]
    ])

### abcd

def open_stub(deg, zo=50):
    theta = np.deg2rad(deg)
    return -1j * zo / np.tan(theta)

def short_stub(deg, zo=50):
    theta = np.deg2rad(deg)
    return 1j * zo * np.tan(theta)

def tline(deg, zo=50):
    theta = np.deg2rad(deg)
    return np.array([
        [ np.cos(theta), 1j * zo * np.sin(theta) ],
        [ 1j * np.sin(theta) / zo, np.cos(theta) ]
    ])

def s2abcd(S, Z0=50):
    S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
    den = 2 * S21
    A = ((1 + S11) *(1 - S22) + S12 * S21) / den
    B = Z0  * ((1 + S11) * (1 + S22) - S12 * S21) / den
    C = 1 / Z0 * ((1 - S11) * (1 - S22) - S12 * S21) / den
    D = ((1 - S11) * (1 + S22) + S12 * S21) / den
    return np.array([
        [ A, B ],
        [ C, D ]
    ])

def abcd2s(M, Z0=50):
    M = np.array(M)
    A = M[0,0]
    B = M[0,1]
    C = M[1,0]
    D = M[1,1]
    den = A + B / Z0 + C * Z0 + D
    S11 = (A + B / Z0 - C * Z0 - D) / den
    S12 = 2 * (A * D - B * C) / den
    S21 = 2 / den
    S22 = (-A + B / Z0 - C * Z0 + D) / den
    return np.array([
        [S11, S12],
        [S21, S22]
    ])

### input

def to_complex(s, f=None):
    s = s.strip().lower()
    if '/' in s:
        r, theta = s.split('/')
        return np.double(r) * np.exp(1j * np.deg2rad(np.double(theta)))
    elif s[-1] == 'h':
        return 2j * np.pi * f * np.double(s[:-1])
    elif s[-1] == 'f':
        return -1j * (1 / (2 * np.pi * f * np.double(s[:-1])))
    else:
        return np.complex(s)

### output

def matching(S, GS, GL):
    if GS is None and GL is None:
        GS, GL = smatch(S)
    elif GL is None:
        GL = np.conj(gout(S, GS))
    elif GS is None:
        GS = np.conj(gin(S, GL))
    GIN, GOUT = gin(S, GL), gout(S, GS)
    return GS, GL, GIN, GOUT

def notation(x, precision=5):
    UNITS = 'FH'
    SUFFIX = ["f", "p", "n", "u", "m", "", "k", "M", "G"]
    exp = np.floor(np.log10(np.absolute(x)))
    mant = round(x / 10**exp, precision-1)
    p = int(exp // 3)
    value = (mant * 10**exp) / 10**(3 * p)
    return "%6.4g%s%s" % (np.absolute(value), SUFFIX[p-4], UNITS[0 if x < 0 else 1])

def fm(mode, *d, f=None, ra=None):
    def h(x, a, b=None): 
        if type(x) == str:
            return a.format(x)
        return a.format('-') if np.isnan(x) else b.format(x)

    res = []
    for m, x in zip(list(mode), d):
        if m == 'p':
            if type(x) == str:
                res.append(h(x, '{:>18s}'))
            else:
                res.append(h(np.abs(x), '{:>10s}', '{:10.4g}'))
                res.append(h(np.rad2deg(np.angle(x)), '{:>7s}', '{:7.2f}'))
        if m == 'd':
            if type(x) == str:
                res.append(h(x, '{:>6s}'))
            else:
                res.append(h(10 * np.log10(x), '{:>6s}', '{:6.2f}'))
        if m == 'x': 
            if type(x) != str:
                w = 2 * np.pi * f
                x = 1 / (w * x) if x < 0 else x / w
                x = np.nan if np.isnan(x) or np.isinf(x) else notation(x)
            res.append(h(x, '{:>8s}'))
        if m == 'y':
            if type(x) != str and not np.isnan(x):
                zo = ra / 3
                w = 2 * np.pi * f
                x = np.nan if x > 0 else '%.0f/%.2f' % (zo, np.rad2deg(-zo / (w * x)))
            res.append(h(x, '{:>8s}'))
        if m == 'z': 
            if type(x) != str and not np.isnan(x):
                zo = ra * 3
                w = 2 * np.pi * f
                x = np.nan if x < 0 else '%.0f/%.2f' % (zo, np.rad2deg(x / (w * zo)))
            res.append(h(x, '{:>8s}'))
        if m == 'f':
            res.append(h(x, '{:>6s}', '{:6.2f}'))
        if m == 'F': 
            res.append(h(x, '{:<6s}', '{:<6g}'))
        if m == 'c':
            res.append(h(x, '{:>17s}', '{:17.4g}'))
        if m == 'a':
            res.append(h(x, '{:>7s}', '{:7.2f}'))
        if m == 'g': 
            res.append(h(x, '{:>9s}', '{:9.4g}'))
        if m == 's':
            res.append(x)
    return ' '.join(res)

def show_network(nw, data):
    mode = data.get('mode')
    if mode == 'a': 
        write_abcd(nw)
    elif mode == 'z':
        write_summary(nw)
    elif mode == 'm':
        write_match(nw, data)
    elif mode == 'g':
        write_gamma(nw, data)
    elif mode == 'noise':
        write_noise(nw, data)
    elif mode == 'lmatch1':
        write_lmatch1(nw, data)
    elif mode == 'lmatch2':
        write_lmatch2(nw, data)
    elif mode == 'stub1':
        write_stub1(nw, data)
    elif mode == 'stub2':
        write_stub2(nw, data)
    elif mode == 'qwt1':
        write_qwt1(nw, data)
    elif mode == 'qwt2':
        write_qwt2(nw, data)
    elif mode == 'qwt3':
        write_qwt3(nw, data)
    elif mode == 'sec1':
        write_sec1(nw, data)
    else:
        write_sparam(nw)

### show reports

def write_abcd(nw):
    print('# MHZ A MA')
    print(fm('Fpppp','! MHZ','A','B','C','D'))
    for f, A in zip(nw.f, nw.a):
        print(fm('F', f / 1e6),
              fm('pppp', *A.flatten()))

def write_sparam(nw):
    print('# MHZ S MA R 50')
    print(fm('Fppppsdgg','! MHZ','S11','S21','S12','S22','!','GUM','K','MU'))
    for f, S in zip(nw.f, nw.s):
        K = rollet(S)
        print(fm('F', f / 1e6),
              fm('ppppsdgg', *S.T.flatten(), '!', gum(S), K, mu(S)))

def write_summary(nw):
    print(fm('Fccddddddfggg','MHZ','Z11','Z22','GUI','S21','GUO','GUM','GMSG','GMAG','GU','K','D','MU'))
    for f, S in zip(nw.f, nw.s):
        S11, S12, S21, S22 = S[0,0], S[0,1], S[1,0], S[1,1]
        K = rollet(S)
        print(fm('F', f / 1e6), 
              fm('ccddddddfggg', g2z(S11), g2z(S22), gui(S), np.abs(S21)**2, 
              guo(S), gum(S), gmsg(S), gmag(S), gu(S), K, np.abs(det(S)), mu(S)))

### matching networks

def write_sec1(nw, data):
    ZLINE = data.get('line', 50)
    print(fm('Fgaccag','MHZ','ZSERIES','LSERIES','ZS','ZL','LSERIES','ZSERIES'))
    for f, S in zip(nw.f, nw.s):
        GS, GL, GIN, GOUT = matching(S, data.get('gs'), data.get('gl'))
        ZS, ZL = g2z(GS), g2z(GL)
        print(fm('F', f / 1e6),
              fm('ga', *sec1(np.conj(ZS), zo=ZLINE)), 
              fm('cc', ZS, ZL), 
              fm('ag', *sec1(np.conj(ZL), zo=ZLINE)[::-1]))

def write_lmatch1(nw, data):
    ZLINE = data.get('line', 50)
    print(fm('Fxxsxxccxxsxx','MHZ','SHUNT','SERIES','!','SERIES','SHUNT','ZS','ZL','SHUNT','SERIES','!','SERIES','SHUNT'))
    for f, S in zip(nw.f, nw.s):
        GS, GL, GIN, GOUT = matching(S, data.get('gs'), data.get('gl'))
        ZS, ZL = g2z(GS), g2z(GL)
        for i in range(2):
            print(fm('F', f / 1e6), 
                  fm('xxs', *lmatch(ZLINE, np.conj(ZS))[i], '!', f=f),
                  fm('xx', *lmatch(ZLINE, np.conj(ZS), 'r')[i], f=f), 
                  fm('cc', ZS, ZL),
                  fm('xxs', *lmatch(np.conj(ZL), ZLINE)[i], '!', f=f),
                  fm('xx', *lmatch(np.conj(ZL), ZLINE, 'r')[i], f=f))

def write_lmatch2(nw, data):
    ZLINE = data.get('line', 50)
    print(fm('Fxxsxxccxxsxx','MHZ','SHUNT','SERIES','!','SERIES','SHUNT','ZS','ZL','SHUNT','SERIES','!','SERIES','SHUNT'))
    for f, S in zip(nw.f, nw.s):
        GS, GL, GIN, GOUT = matching(S, data.get('gs'), data.get('gl'))
        ZS, ZL = g2z(GS), g2z(GL)
        for i in range(2):
            print(fm('F', f / 1e6), 
                  fm('yzs', *lmatch(ZLINE, np.conj(ZS))[i], '!', f=f, ra=ZS.real),
                  fm('zy', *lmatch(ZLINE, np.conj(ZS), 'r')[i], f=f, ra=ZS.real), 
                  fm('cc', ZS, ZL),
                  fm('yzs', *lmatch(np.conj(ZL), ZLINE)[i], '!', f=f, ra=ZL.real),
                  fm('zy', *lmatch(np.conj(ZL), ZLINE, 'r')[i], f=f, ra=ZL.real))

def write_stub1(nw, data):
    ZLINE = data.get('line', 50)
    print(fm('Faaaccaas','MHZ','(LBAL)','LSHUNT','LSERIES','ZS','ZL','LSERIES','LSHUNT','(LBAL)'))
    for f, S in zip(nw.f, nw.s):
        GS, GL, GIN, GOUT = matching(S, data.get('gs'), data.get('gl'))
        ZS, ZL = g2z(GS), g2z(GL)
        for i in range(2):
            for short in [ False, True ]:
                print(fm('F', f / 1e6),
                      fm('aaa', *stub1(np.conj(ZS), zo=ZLINE, short=short)[i]),
                      fm('cc', ZS, ZL),
                      fm('aaa', *stub1(np.conj(ZL), zo=ZLINE, short=short)[i][::-1]),
                      's/s' if short else 'o/o')

def write_stub2(nw, data):
    ZLINE = data.get('line', 50)
    print(fm('Faaaaaccaaaaa','MHZ','(LBAL)','LSHUNT','LSERIES','LSHUNT','(LBAL)',
             'ZS','ZL','(LBAL)','LSHUNT','LSERIES','LSHUNT','(LBAL)'))
    for f, S in zip(nw.f, nw.s):
        GS, GL, GIN, GOUT = matching(S, data.get('gs'), data.get('gl'))
        ZS, ZL = g2z(GS), g2z(GL)
        for l in [ 45, 135 ]:
            for mode in [ 'ss', 'oo', 'so', 'os' ]:
                r1 = stub2(np.conj(ZS), l, zo=ZLINE, mode=mode)
                r2 = stub2(np.conj(ZL), l, zo=ZLINE, mode=mode)
                for i in range(2):
                    print(fm('F', f / 1e6),
                          fm('aaaaa', *r1[i]),
                          fm('cc', ZS, ZL),
                          fm('aaaaa', *r2[i][::-1]),
                          '{}/{}'.format(mode, mode[::-1])) 

def write_qwt1(nw, data):
    ZLINE = data.get('line', 50)
    print(fm('Fggaccagg','MHZ','ZQWT','ZSERIES','LSERIES','ZS','ZL','LSERIES','ZSERIES','ZQWT'))
    for f, S in zip(nw.f, nw.s):
        GS, GL, GIN, GOUT = matching(S, data.get('gs'), data.get('gl'))
        ZS, ZL = g2z(GS), g2z(GL)
        for minimum in [ False, True ]:
            print(fm('F', f / 1e6),
                  fm('gga', *qwt1(np.conj(ZS), zo=ZLINE, minimum=minimum)),
                  fm('cc', ZS, ZL),
                  fm('agg', *qwt1(np.conj(ZL), zo=ZLINE, minimum=minimum)[::-1]))

def write_qwt2(nw, data):
    ZLINE = data.get('line', 50)
    print(fm('Fggagccgagg','MHZ','ZQWT','ZSHUNT','LSHUNT','(ZBAL)','ZS','ZL','(ZBAL)','LSHUNT','ZSHUNT','ZQWT'))
    for f, S in zip(nw.f, nw.s):
        GS, GL, GIN, GOUT = matching(S, data.get('gs'), data.get('gl'))
        ZS, ZL = g2z(GS), g2z(GL)
        for short in [ False, True ]:
            print(fm('F', f / 1e6),
                  fm('ggag', *qwt2(np.conj(ZS), zo=ZLINE, short=short)),
                  fm('cc',ZS, ZL),
                  fm('gagg', *qwt2(np.conj(ZL), zo=ZLINE, short=short)[::-1]),
                  's/s' if short else 'o/o')

def write_qwt3(nw, data):
    ZLINE = data.get('line', 50)
    z2 = data.get('z2')
    print(fm('Fggaaccaagg','MHZ','ZQWT','ZSHUNT','LSHUNT','(LBAL)','ZS','ZL','(LBAL)','LSHUNT','ZSHUNT','ZQWT'))
    for f, S in zip(nw.f, nw.s):
        GS, GL, GIN, GOUT = matching(S, data.get('gs'), data.get('gl'))
        ZS, ZL = g2z(GS), g2z(GL)
        for short in [ False, True ]:
            print(fm('F', f / 1e6), 
                  fm('ggaa', *qwt3(np.conj(ZS), z2, zo=ZLINE, short=short)),
                  fm('cc', ZS, ZL),
                  fm('aagg', *qwt3(np.conj(ZL), z2, zo=ZLINE, short=short)[::-1]),
                  's/s' if short else 'o/o')

### show matching

def write_gamma(nw, data):
    GS, GL = data.get('gs'), data.get('gl')
    format_match_header(gamma=True)
    for i in range(len(nw)):
        format_match_body(nw, i, GS, GL, gamma=True)

def write_noise(nw, data):
    format_match_header(gamma=True)
    noise = np.maximum(2, data.get('noise'))
    for i in range(len(nw)):
        f = nw.f[i]
        S = nw.s[i]
        for n in range(noise):
            t = n / (noise - 1)
            GMS, GML = smatch(S)
            GOPT = nw.nparam(f)[1]
            GS, GL = GOPT + t * np.nan_to_num(GMS - GOPT), None
            format_match_body(nw, i, GS, GL, gamma=True)
            if np.isnan(GMS * GOPT): break

def write_match(nw, data):
    GS, GL = data.get('gs'), data.get('gl')
    format_match_header()
    for i in range(len(nw)):
        format_match_body(nw, i, GS, GL)

def format_match_header(gamma=False):
    if gamma:
        print(fm('Ffpfdppdfpfsddd','MHZ','QS','GS','SWRIN','MLIN','GIN','GOUT','MLOUT','SWROUT','GL','QL','!','GT','NF','NM'))
    else:
        print(fm('Ffcfdccdfcfsddd','MHZ','QS','ZS','SWRIN','MLIN','ZIN','ZOUT','MLOUT','SWROUT','ZL','QL','!','GT','NF','NM'))

def format_match_body(nw, i, GS, GL, gamma=False):
    f = nw.f[i]
    S = nw.s[i]
    FMIN, GOPT, RN = nw.nparam(f)
    GS, GL, GIN, GOUT = matching(S, GS, GL)
    ZS, ZL, ZIN, ZOUT = g2z(GS), g2z(GL), g2z(GIN), g2z(GOUT)
    RLIN, RLOUT = gmatch(ZS, ZIN), gmatch(ZL, ZOUT)
    SWRIN, SWROUT = swr(RLIN), swr(RLOUT)
    QS, QL = np.abs(ZS.imag / ZS.real), np.abs(ZL.imag / ZL.real)
    GT = sgain(S, GS, GL)
    NF = nfig(FMIN, GOPT, RN, GS) if len(nw.n) else npassive(S, GT, GS) 
    NM = nmeasure(NF, GT)
    if gamma:
        print(fm('F', f / 1e6), 
              fm('fpf', QS, GS, SWRIN),
              fm('dppd', mismatch(RLIN), GIN, GOUT, mismatch(RLOUT)),
              fm('fpf', SWROUT, GL, QL), '!',
              fm('ddd', GT, NF, NM))
    else:
        print(fm('F', f / 1e6), 
              fm('fcf', QS, ZS, SWRIN),
              fm('dccd', mismatch(RLIN), ZIN, ZOUT, mismatch(RLOUT)),
              fm('fcf', SWROUT, ZL, QL), '!',
              fm('ddd', GT, NF, NM))

# main

def main(*args):
    args = list(args)
    data = {}
    stack = [ Touchstone(sys.stdin) ]

    while args:
        opt = args.pop(0)
        top = stack[-1]

        # diplay options

        if opt == '-a':
            data['mode'] = 'a'
        elif opt == '-z':
            data['mode'] = 'z'
        elif opt == '-m':
            data['mode'] = 'm'
        elif opt == '-g':
            data['mode'] = 'g'
        elif opt == '-noise':
            data['mode'] = 'noise'
            data['noise'] = np.int(args.pop(0))
        elif opt == '-lmatch1':
            data['mode'] = 'lmatch1'
        elif opt == '-lmatch2':
            data['mode'] = 'lmatch2'
        elif opt == '-sec1':
            data['mode'] = 'sec1'
        elif opt == '-qwt1':
            data['mode'] = 'qwt1'
        elif opt == '-qwt2':
            data['mode'] = 'qwt2'
        elif opt == '-qwt3':
            data['z2'] = np.double(args.pop(0))
            data['mode'] = 'qwt3'
        elif opt == '-stub1':
            data['mode'] = 'stub1'
        elif opt == '-stub2':
            data['mode'] = 'stub2'

        # matching options

        elif opt == '-zs':
            data['gs'] = z2g(to_complex(args.pop(0)))
        elif opt == '-zl':
            data['gl'] = z2g(to_complex(args.pop(0)))
        elif opt == '-gs':
            data['gs'] = to_complex(args.pop(0))
        elif opt == '-gl':
            data['gl'] = to_complex(args.pop(0))
        elif opt == '-line':
            data['line'] = np.double(args.pop(0))

        # binary operations

        elif opt == '-swap':
            b = stack.pop()
            a = stack.pop()
            stack.append(b)
            stack.append(a)
        elif opt == '-cascade':
            b = stack.pop()
            a = stack.pop()
            stack.append(a ** b)
        elif opt == '-deembed':
            b = stack.pop()
            a = stack.pop()
            stack.append(a ** b.inv)
        elif opt == '-ideembed':
            b = stack.pop()
            a = stack.pop()
            stack.append(a.inv ** b)

        # unary transformation operations

        elif opt == '-flip':
            for S in top.s:
                S[0,0], S[0,1], S[1,0], S[1,1] = S[1,1], S[1,0], S[0,1], S[0,0] 
        elif opt == '-unilateral':
            GS, GL = data.pop('gs', None), data.pop('gl', None)
            for S in top.s:
                GS, GL, GIN, GOUT = matching(S, GS, GL)
                S[0,0], S[0,1], S[1,1] = GIN, 0, GOUT
        elif opt == '-cbg':
            top.s = np.array([ cbg_transform(S) for S in top.s ])
        elif opt == '-ccd':
            top.s = np.array([ ccd_transform(S) for S in top.s ])
        elif opt == '-lift':
            x = args.pop(0)
            top.s = np.array([ lift_ground(S, z2g(to_complex(x, f=f))) for f, S in zip(top.f, top.s) ])

        # unary cascade operations

        elif opt == '-tline':
            x = to_complex(args.pop(0))
            A = tline(np.rad2deg(np.angle(x)), zo=np.abs(x))
            stack[-1] **= Touchstone(f=top.f, a=[A] * len(top))
        elif opt == '-open':
            x = to_complex(args.pop(0))
            x = open_stub(np.rad2deg(np.angle(x)), zo=np.abs(x))
            A = [[1, 0], [1/x, 1]]
            stack[-1] **= Touchstone(f=top.f, a=[A] * len(top))
        elif opt == '-short':
            x = to_complex(args.pop(0))
            x = short_stub(np.rad2deg(np.angle(x)), zo=np.abs(x))
            A = [[1, 0], [1/x, 1]]
            stack[-1] **= Touchstone(f=top.f, a=[A] * len(top))
        elif opt == '-series':
            x = args.pop(0)
            stack[-1] **= Touchstone(f=top.f, a=[[[1, to_complex(x, f=f)], [0, 1]] for f in top.f ])
        elif opt == '-shunt':
            x = args.pop(0)
            stack[-1] **= Touchstone(f=top.f, a=[[[1, 0], [1/to_complex(x, f=f), 1]] for f in top.f ])

        # push operations

        elif opt == '-copy':
            stack.append(top.copy())
        elif opt == '-block':
            stack.append(top.copy())
            for S in stack[-1].s:
                S[0,0], S[0,1], S[1,0], S[1,1] = 1, 0, 0, 1 
        elif opt == '-pass':
            stack.append(top.copy())
            for S in stack[-1].s:
                S[0,0], S[0,1], S[1,0], S[1,1] = 0, 1, 1, 0 
        elif opt == '-f':
            with open(args.pop(0)) as f:
                stack.append(Touchstone(f))

        # unrecognized

        else:
            print('Unrecognized command line option. Exiting.', file=sys.stderr)
            sys.exit(1)

    if stack: 
        show_network(stack[-1], data)


if __name__ == '__main__':
    import sys
    np.seterr(divide='ignore', invalid='ignore')
    main(*sys.argv[1:])


